#!/usr/bin/env python
# -*- python -*-

import sys
import types

import argparse
import os.path

import os

parser = argparse.ArgumentParser(description="Converts any file to C++ source.")

parser.add_argument('--name', help="C++ variable name")
parser.add_argument('--version', help="optional data version")
parser.add_argument('--version-file', help="optional data version (from file)")
parser.add_argument('input', nargs=1, help='Input file')
parser.add_argument('output', nargs='?', default=None, help='Output file')

args = parser.parse_args()

ifile = args.input[0]
hpp = None
cpp = None

if args.output == None:
    base, ext = os.path.splitext(ifile)
elif args.output.endswith("cpp"):
    base, ext = os.path.splitext(args.output)
else:
    base = args.output

hpp = base + ".hpp"
cpp = base + ".cpp"

name = args.name.split("::")

content = file(ifile, "r").read()

hpp_file = file(hpp + ".file2cpp", "w")
cpp_file = file(cpp + ".file2cpp", "w")

# header:
for ns in name[:-1]:
    hpp_file.write("namespace %s {\n" % (ns, ))

hpp_file.write("    extern const unsigned char %s[%s];\n"
               % (name[-1], len(content)))

# version support
version = None
if args.version_file:
    version = int(file(args.version_file).read())
elif args.version:
    version = args.version

if version:
    hpp_file.write("    constexpr unsigned int %s_attr_version = %s;\n"
                   % (name[-1], version))

for ns in reversed(name[:-1]):
    hpp_file.write("} // namespace %s\n" % (ns, ))

# cpp:
cpp_file.write('#include "%s"\n\n' % (hpp, ))
cpp_file.write("const unsigned char %s[%s] = {\n" % (args.name, len(content)))

# dump content

pos = 0
cpp_file.write("      ")

for byte in content:
    if pos:
        if not (pos % 8): cpp_file.write("\n    ")
        cpp_file.write(", 0x%02x" % (ord(byte), ))
    else:
        cpp_file.write("0x%02x" % (ord(byte), ))

    pos += 1

cpp_file.write("\n};\n")

hpp_file.close()
cpp_file.close()

os.rename(hpp + ".file2cpp", hpp)
os.rename(cpp + ".file2cpp", cpp)
